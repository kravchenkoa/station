profile = "weather/will-it-rain@1.0"
provider = "accuweather"

map Now {
  // call operation to get location code - it is cleaner so separate it like this
  locationCode = call GetLocationCode(coordinates = input.coordinates)

  http GET "/currentconditions/v1/{locationCode}" {
    security "accuweather_apikey"

    request {
      query {
        details = true
      }
    }

    response 200 "application/json" {
      weatherCondition = body[0]
      map result {
        precipitation = weatherCondition.HasPrecipitation
        precipitationType = call MapPrecipitationType(precipitationType = weatherCondition.PrecipitationType)
        precipitationLastHour = call GetLastHourPrecipitation(units = input.units, weatherCondition = weatherCondition)
      }
    }
  }

}

operation GetLocationCode {
  http GET "/locations/v1/cities/geoposition/search" {
    security "accuweather_apikey"

    request {
      query {
        q = args.coordinates.latitude + ',' + args.coordinates.longitude
      }
    }

    response 200 "application/json" {
      // return the location key of the first result
      // maybe later this could filter the responses or something
      return body.Key
    }
  }
}

operation MapPrecipitationType {
  set {
    result = (() => {
      switch (args.precipitationType) {
        case 'Rain':
          return 'rain'
      
        case 'Snow':
          return 'show'

        case 'Ice':
          return 'ice'

        case 'Mixed':
          return 'mixed'

        default:
          return undefined
      }
    })()
  }

  return result
}

operation GetLastHourPrecipitation {
  weatherCondition = args.weatherCondition

  result = undefined

  set if(args.units === 'metric' && weatherCondition.Precip1hr && weatherCondition.Precip1hr.Metric) {
    result = weatherCondition.Precip1hr.Metric.Value
  }

  set if(args.units === 'imperial' && weatherCondition.Precip1hr && weatherCondition.Precip1hr.Imperial) {
    result = weatherCondition.Precip1hr.Imperial.Value
  }

  return result
}
