profile = "address/geocoding@3.0"
provider = "opencage"

// Opencage API documentation
//  https://opencagedata.com/api

map Geocode {
  http GET "/geocode/v1/json" {
    security "apikey"
    request {
      query {
        q = (`${input.streetAddress || ""}, ${input.addressLocality || ""}, ${input.addressRegion || ""}, ${input.postalCode || ""}, ${input.addressCountry || ""}`)
      }
    }

    response 200 "application/json" {
      return map error if (body.status.code !== 200) {
        title = "Error geocoding address"
        detail = body.status.message
      }

      map result {
        latitude = body.results[0].geometry.lat
        longitude = body.results[0].geometry.lng
      }
    }
  }
}


map ReverseGeocode {
  http GET "/geocode/v1/json" {
    security "apikey"
    request {
      query {
        q = (`${input.latitude || ""}+${input.longitude || ""}`)
      }
    }

    response 200 "application/json" {
      return map error if (body.status.code !== 200) {
        title = "Error reverse geocoding coordinates"
        detail = body.status.message
      }

      filteredResults = body.results.filter(r => r.components._type === "building" )

      map result filteredResults.map(r => {
        let mappedAddress = {};

        if (r.components.hasOwnProperty('ISO_3166-1_alpha-2')) {
          mappedAddress['addressCountry'] = r.components['ISO_3166-1_alpha-2'];
        }
        else if (r.components.hasOwnProperty('country_code')) {
          mappedAddress['addressCountry'] = r.components['country_code'];
        }

        if (r.components.hasOwnProperty('road')) {
          if (r.components.hasOwnProperty('house_number')) {
            mappedAddress['streetAddress'] = r.components['house_number'] + " " + r.components['road'];
          }
          else {
            mappedAddress['streetAddress'] = r.components['road'];
          }
        }

        if (r.components.hasOwnProperty('postcode')) {
          mappedAddress['postalCode'] = r.components['postcode'];
        }

        if (r.components.hasOwnProperty('state_code')) {
          mappedAddress['addressRegion'] = r.components['state_code'];
        }

        if (r.components.hasOwnProperty('city')) {
          mappedAddress['addressLocality'] = r.components['city'];
        }

        if (r.hasOwnProperty('formatted')) {
          mappedAddress['formattedAddress'] = r['formatted'];
        }

        return mappedAddress;
      })
    }
  }
}

